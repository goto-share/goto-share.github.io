{"pageProps":{"posts":[{"title":"Exploiting HTTP Parameter Smuggling in Golang\n","date":"2022-10-21T00:00:00.000Z","draft":false,"tags":["http","golang"],"summary":"Oxeye’s security research team has found a security vulnerability in Golang-based applications. Under certain conditions, it lets a threat actor bypass validations based on HTTP request parameters due to the use of unsafe URL parsing.\n","slug":"2022-10-21-922"},{"title":"A tool that can do health/status checking\n","date":"2022-03-25T00:00:00.000Z","draft":false,"tags":["github","megaease","golang"],"summary":"最近有空，写了个探活其它服务的小程序，支持HTTP，TCP，Shell，Native Client的探活，HTTP看返回码，TCP看连不连得上，Shell 看运行结果，然后对于状态变化进行“边缘触发”通知，发通知到Email, Slack, Discord，可以每天/每周/每月发送一个各服务的SLA报告。图中是Discrod的通知示例。\n","slug":"2022-03-25-908"},{"title":"Memory management in Go\n","date":"2022-03-16T00:00:00.000Z","draft":false,"tags":["medium","memory","golang"],"summary":"How memory works in Go and some tips to get the best out of your memory.\n","slug":"2022-03-16-907"},{"title":"GO编程模式：泛型编程\n","date":"2021-09-04T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"Go语言的1.17版本发布了，其中开始正式支持泛型了。虽然还有一些限制（比如，不能把泛型函数export），但是，可以体验了。我的这个《Go编程模式》的系列终于有了真正的泛型编程了，再也不需要使用反射或是go generation这些难用的技术了。周末的时候，我把Go 1.17下载下来，然后，体验了一下泛型编程，还是很不错的。下面，就让我们来看一下Go的泛型编程\n","slug":"2021-09-04-885"},{"title":"Go编程模式：切片，接口，时间和性能\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"在本篇文章中，我会对Go语言编程模式的一些基本技术和要点，这样可以让你更容易掌握Go语言编程。其中，主要包括，数组切片的一些小坑，还有接口编程，以及时间和程序运行性能相关的话题。\n","slug":"2020-12-26-850"},{"title":"Go 编程模式：错误处理\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会很好。不同的语言有不同的出现处理的方式。Go语言也一样，在本篇文章中，我们来讨论一下Go语言的出错出处，尤其是那令人抓狂的 if err != nil 。\n","slug":"2020-12-26-851"},{"title":"Go 编程模式：Functional Options\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"在本篇文章中，我们来讨论一下Functional Options这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前在Go语言中最流行的一种编程模式。但是，在我们正式讨论这个模式之前，我们需要先来看看要解决什么样的问题。\n","slug":"2020-12-26-852"},{"title":"Go编程模式：委托和反转控制\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"反转控制 IoC – Inversion of Control  是一种软件设计的方法，其主要的思想是把控制逻辑与业务逻辑分享，不要在业务逻辑里写控制逻辑，这样会让控制逻辑依赖于业务逻辑，而是反过来，让业务逻辑依赖控制逻辑。在《[IoC/DIP其实是一种管理思想](https://coolshell.cn/articles/9949.html)》中的那个开关和电灯的示例一样，开关是控制逻辑，电器是业务逻辑，不要在电器中实现开关，而是把开关抽象成一种协议，让电器都依赖之。这样的编程方式可以有效的降低程序复杂度，并提升代码重用。\n","slug":"2020-12-26-853"},{"title":"Go编程模式：Map-Reduce\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"在本篇文章中，我们学习一下函数式编程的中非常重要的Map、Reduce、Filter的三种操作，这三种操作可以让我们非常方便灵活地进行一些数据处理——我们的程序中大多数情况下都是在到倒腾数据，尤其对于一些需要统计的业务场景，Map/Reduce/Filter是非常通用的玩法\n","slug":"2020-12-26-854"},{"title":"Go 编程模式：Go Generation\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"Go语言代码生成主要还是用来解决编程泛型的问题，泛型编程主要解决的问题是因为静态类型语言有类型，所以，相关的算法或是对数据处理的程序会因为类型不同而需要复制一份，这样导致数据类型和算法功能耦合的问题。泛型编程可以解决这样的问题，就是说，在写代码的时候，不用关心处理数据的类型，只需要关心相当处理逻辑。泛型编程是静态语言中非常非常重要的特征，如果没有泛型，我们很难做到多态，也很难完成抽象，会导致我们的代码冗余量很大。\n","slug":"2020-12-26-855"},{"title":"Go编程模式：修饰器\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"之前写过一篇《Python修饰器的函数式编程》，这种模式很容易的可以把一些函数装配到另外一些函数上，可以让你的代码更为的简单，也可以让一些“小功能型”的代码复用性更高，让代码中的函数可以像乐高玩具那样自由地拼装。所以，一直以来，我对修饰器decoration这种编程模式情有独钟，这里写一篇Go语言相关的文章。\n","slug":"2020-12-26-856"},{"title":"Go编程模式：Pipeline\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"本篇文章，我们着重介绍Go编程中的Pipeline模式。对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把各种命令拼接起来完成一个更强功能的技术方法。在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API编排，其实都是受pipeline这种技术方式的影响，Pipeline这种技术在可以很容易的把代码按单一职责的原则拆分成多个高内聚低耦合的小模块，然后可以很方便地拼装起来去完成比较复杂的功能。\n","slug":"2020-12-26-857"},{"title":"Go 编程模式：k8s Visitor 模式\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"本篇文章主要想讨论一下，Kubernetes 的 kubectl 命令中的使用到到的一个编程模式 – Visitor。本来，Visitor 是面向对象设计模英中一个很重要的设计模款，这个模式是一种将算法与操作对象的结构分离的一种方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作，是遵循开放/封闭原则的一种方法。这篇文章我们重点看一下 kubelet 中是怎么使用函数式的方法来实现这个模式的。\n","slug":"2020-12-26-858"},{"title":"今年在Gopher中国的分享主题\n","date":"2020-12-26T00:00:00.000Z","draft":false,"tags":["coolshell","golang"],"summary":"今年在Gopher中国的分享主题，终于成文完毕，一共9篇（今年没多长时间写博客，年底补齐）。\n","slug":"2020-12-26-859"},{"title":"GopherChina 2020  - Go programming patterns.\n","date":"2020-11-22T00:00:00.000Z","draft":false,"tags":["pdf","golang"],"summary":"GopherChina 2020  - Go programming patterns. I hope it's useful for you to improve your coding skills and you will like it.\n","slug":"2020-11-22-845"},{"title":"Go Search Extension\n","date":"2020-05-27T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"我做了一款在地址栏快速搜索go语言文档和第三方库的插件,感兴趣的朋友可以下载体验\n","slug":"2020-05-27-783"},{"title":"Google Drive 神仙级程序GoIndex\n","date":"2020-04-01T00:00:00.000Z","draft":false,"tags":["twitter","golang"],"summary":"推荐一个下载Google Drive 里的文件的神仙级程序GoIndex 。 这个部署在 CloudFlare Workers的小程序。 可以将 Google Drive 文件以目录形式列出，并直连下载。 流量走 CloudFlare ，网速由 CloudFlare 决定。 https://t.co/xXk5Tvc3MA\n","slug":"2020-04-01-741"},{"title":"Collection pipelines in Go?\n","date":"2020-03-07T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"代码我就不打了，手机不方便，reddit 上有一个一样的问题，题目中有代码示例，一毛一样\n","slug":"2020-03-07-677"},{"title":"结构体、集合和高阶函数 - Go 入门指南\n","date":"2020-03-07T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"UDN开源文档(doc.yonyoucloud.com)：通常你在应用中定义了一个结构体，那么你也可能需要这个结构体的（指针）对象集合，比如：在定义所需功能时我们可以利用函数可以...\n","slug":"2020-03-07-678"},{"title":"Go Slices: usage and internals\n","date":"2020-03-07T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"How to use Go slices, and how they work.\n","slug":"2020-03-07-688"},{"title":"Goroutine Leak 检测器\n","date":"2020-03-07T00:00:00.000Z","draft":false,"tags":["github","golang"],"summary":"Goroutine Leak 检测器，Uber出品。\n","slug":"2020-03-07-707"},{"title":"GoReplay\n","date":"2020-02-29T00:00:00.000Z","draft":false,"tags":["github","golang"],"summary":"https://github.com/buger/goreplay 这玩意儿就很有市场。\n","slug":"2020-02-29-633"},{"title":"Why Discord is switching from Go to Rust\n","date":"2020-02-14T00:00:00.000Z","draft":false,"tags":["golang","rust"],"summary":"Rust is becoming a first class language in a variety of domains. At Discord, we’ve seen success with Rust on the client side and server…\n","slug":"2020-02-14-573"},{"title":"Excelize 今天刚发布了 2.1.0 版本\n","date":"2020-02-14T00:00:00.000Z","draft":false,"tags":["github","golang"],"summary":"大家好，Excelize 是 Go 语言编写的 Excel 文档基础库，今天刚发布了 2.1.0 版本，包括了很多新增功能和性能优化，希望帮助到有需要的朋友～\n","slug":"2020-02-14-597"},{"title":"An Ultimate GopherLabs Hands-on Labs\n","date":"2020-02-04T00:00:00.000Z","draft":false,"tags":["github","golang"],"summary":"Go - Beginners Intermediate Advanced\n","slug":"2020-02-04-498"},{"title":"gofmt\n","date":"2020-02-04T00:00:00.000Z","draft":false,"tags":["github","golang"],"summary":"Contribute to bigpigeon/gofmt development by creating an account on GitHub.\n","slug":"2020-02-04-505"},{"title":"naabu: A fast port scanner written in go\n","date":"2020-02-04T00:00:00.000Z","draft":false,"tags":["github","golang","network"],"summary":"A fast port scanner written in go with a focus on reliability and simplicity. Designed to be used in combination with other tools for attack surface discovery in bug bounties and pentests\n","slug":"2020-02-04-536"},{"title":"调度系统设计精要\n","date":"2020-02-04T00:00:00.000Z","draft":false,"tags":["weixin","architecture","linux","golang","kubernetes"],"summary":"全文 2 万字，深入调度器的设计原理，源码级分析 Linux、Go 和 Kubernetes 调度器的演变过程。\n","slug":"2020-02-04-552"},{"title":"Go: Goroutine and Preemption\n","date":"2020-01-21T00:00:00.000Z","draft":false,"tags":["medium","golang"],"summary":"ℹ️ This article is based on Go 1.13.\n","slug":"2020-01-21-464"},{"title":"关于Go的tracing可以参看这篇文章\n","date":"2020-01-21T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"上面这篇文章中有几个 Goroutine的Tracing图。关于Go的tracing可以参看这篇文章 https://about.sourcegraph.com/go/an-introduction-to-go-tool-trace-rhys-hiltner\n","slug":"2020-01-21-465"},{"title":"Go vs C#, part 1: Goroutines vs Async-Await\n","date":"2020-01-21T00:00:00.000Z","draft":false,"tags":["medium","golang"],"summary":"Two remaining parts are here:\n","slug":"2020-01-21-466"},{"title":"为什么这么设计\n","date":"2020-01-21T00:00:00.000Z","draft":false,"tags":["golang","linux","network","os","database"],"summary":"为什么这么设计（Why’s THE Design）是一系列关于计算机领域中程序设计决策的文章，我们在这个系列的每一篇文章中都会提出一个具体的问题并从不同的角度讨论这种设计的优缺点、对具体实现造成的影响。\n","slug":"2020-01-21-487"},{"title":"Algorithms with Go\n","date":"2020-01-21T00:00:00.000Z","draft":false,"tags":["golang","algorithm"],"summary":"Learn how algorithms work and how to implement them in Go\n","slug":"2020-01-21-489"},{"title":"Building a BitTorrent client from the ground up in Go\n","date":"2020-01-14T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"What is the complete path between visiting thepiratebay and sublimating an mp3 file from thin air? In this post, we'll implement enough of the BitTorrent protocol to download Debian. Look at the [Source code](https://github.com/veggiedefender/torrent-client/) or skip to the [last bit](/posts/torrent#putting-it-all-together).\n","slug":"2020-01-14-428"},{"title":"发现Go的官方教程被重写了，加入了go module ，\n","date":"2020-01-14T00:00:00.000Z","draft":false,"tags":["golang"],"summary":"发现Go的官方教程被重写了，加入了go module ，\n","slug":"2020-01-14-438"},{"title":"最新的go 1.14提升了defer性能\n","date":"2020-01-14T00:00:00.000Z","draft":false,"tags":["twitter","golang"],"summary":"最新的go 1.14提升了defer性能\n","slug":"2020-01-14-440"}],"tag":"golang"},"__N_SSG":true}